
"""
INFOS:
coordinates (on maps): (latitude, longitude) / (breitengrad, laengengrad)
latitude in [-90, 90] not periodically continued, longitude in [-180, 180] periodically continued
bot in units of (fractional) degrees (NOT: minute/second)
"""


import os
import shutil
import csv
import math
import numpy as np
from sklearn.metrics.pairwise import haversine_distances
import matplotlib.pyplot as plt
from datetime import datetime
from tqdm import tqdm


###################################################################
# INITIAL DATA SETUP ROUTINES
###################################################################


def copy_useful_data_to_workspace(tmp_data_path: str, workspace_data_path: str):
    dir_list = os.listdir(tmp_data_path)
    useful_dir_counter = 0
    for dir in dir_list:
        if "labels.txt" in os.listdir(tmp_data_path + dir):
            useful_dir_counter += 1
            os.mkdir(workspace_data_path + dir)
            shutil.copy(tmp_data_path + dir + "/labels.txt", workspace_data_path + dir + "/labels.txt")
            os.mkdir(workspace_data_path + dir + "/Trajectory")
            for trajectory in os.listdir(tmp_data_path + dir + "/Trajectory"):
                shutil.copy(tmp_data_path + dir + "/Trajectory/" + trajectory,
                            workspace_data_path + dir + "/Trajectory/" + trajectory)

    print("Number of useful directories: {} (of {})".format(useful_dir_counter, len(dir_list)))


def read_trajectory(trajectory_path: str):

    timestamps = []
    longitudes = []     # laengengrad in grad
    latitudes = []      # breitengrad in grad
    altitudes = []      # hoehe in feet ?!


    with open(trajectory_path, "r") as file:
        reader = csv.reader(file, delimiter=",")

        for counter, row in enumerate(reader):
            # skip first 6 rows:
            if counter <= 5:
                continue

            # get timestamp:
            date = row[5].split("-")
            time = row[6].split(":")
            dt = datetime(int(date[0]), int(date[1]), int(date[2]), int(time[0]), int(time[1]), int(time[2]))
            timestamps.append(dt.timestamp())

            # get (3D) coordinates:
            latitudes.append(float(row[0]))
            longitudes.append(float(row[1]))
            altitudes.append(float(row[3]))

    return timestamps, latitudes, longitudes, altitudes


def read_trajectory_labels(label_path: str):

    timestamps_start = []
    timestamps_end = []
    labels = []

    with open(label_path, "r") as file:
        reader = csv.reader(file, delimiter="\t")

        # skip header line:
        header = reader.__next__()

        for row in reader:
            # get start / end timestamp:
            for idx in range(2):
                d = row[idx].split(" ")[0]
                d = d.split("/")
                t = row[idx].split(" ")[1]
                t = t.split(":")
                dt = datetime(int(d[0]), int(d[1]), int(d[2]), int(t[0]), int(t[1]), int(t[2]))
                if idx == 0:
                    timestamps_start.append(dt.timestamp())
                else:
                    timestamps_end.append(dt.timestamp())

            # get label:
            labels.append(row[2])

    return timestamps_start, timestamps_end, labels


def label_trajectories(target_directory: str):

    # read label file and initialize label index:
    labels_t_start, labels_t_end, labels_labels = read_trajectory_labels(target_directory + "/labels.txt")
    label_index = 0

    # get sorted trajectory filenames
    sorted_trajectory_names = os.listdir(target_directory + "/Trajectory")
    sorted_trajectory_names = sorted(sorted_trajectory_names, key=lambda x: int(x.split(".")[0]))

    # open file to write into:
    with open(target_directory + "/labeled_trajectories.csv", "w") as csv_file:
        writer = csv.writer(csv_file, delimiter="\t")

        # used for finishing function:
        finished_label_file = False

        # iterate through gps path files:
        for file_name in sorted_trajectory_names:

            if finished_label_file:
                break

            # get trajectory:
            times, latitudes, longitudes, altitudes = read_trajectory(target_directory + "/Trajectory/" + file_name)

            for t, lat, long, alt in zip(times, latitudes, longitudes, altitudes):

                # skip all labels of past times:
                try:
                    while labels_t_end[label_index] < t:
                        # divide different paths:
                        writer.writerow(["", "", "", "", ""])
                        label_index += 1
                # thrown if labels.txt reaches end:
                except IndexError:
                    finished_label_file = True
                    break

                # skip points below T_0:
                if t < labels_t_start[label_index]:
                    continue

                writer.writerow([t, lat, long, alt, labels_labels[label_index]])


def create_training_data_distance_time(target_directory: str):

    def reset_variables():
        return "", [], [], ""

    with open(target_directory + "/training_data.txt", "w") as out_file:
        writer = csv.writer(out_file, delimiter=";")

        with open(target_directory + "/labeled_trajectories.csv", "r") as csv_file:
            reader = csv.reader(csv_file, delimiter="\t")

            # init variables to store data:
            label, distances, times, row_tmp = reset_variables()

            # iterate through trajectory file:
            for row in tqdm(reader):

                # windows support (extra empty lines are generated using windows):
                if not row:
                    continue

                # check for end of trajectory
                if row[0] == "":
                    # store trajectory and reset variables:
                    if label != "":
                        writer.writerow([label, times, distances])
                    label, distances, times, row_tmp = reset_variables()

                # add data if row is not empty:
                else:
                    # get label if not yet set:
                    if label == "":
                        label = row[4]

                    # add time difference:
                    if row_tmp != "":
                        times.append(int(float(row[0])-float(row_tmp[0])))

                    # add distance:
                    if row_tmp != "":
                        p1 = [float(row_tmp[1]), float(row_tmp[2])]
                        p2 = [float(row[1]), float(row[2])]
                        distances.append(int(100*gps_distance(p1, p2)+0.5))  # TODO: now in cm as int

                    # store row for next step:
                    row_tmp = row


def interpolate_training_data(target_directory: str, frequency: float):
    data_tuples = read_training_data(target_directory + "/training_data.txt")
    d0 = data_tuples[0]
    print(d0[0])
    print(d0[1])
    # TODO: think about how the data should be passed
    # d0 = data_tuples[50]
    # new_times = np.arange(1/frequency, np.sum(d0[0]), 1/frequency)

    # print(new_times.shape)
    # print(np.interp(new_times, d0[0], d0[1]))


###################################################################
# DATA INVESTIGATION
###################################################################


def get_user_stats_paths_and_times():
    user_path = "../_shared_data/GPSLabels/trajectories/"
    for dir in sorted([dir for dir in os.listdir(user_path)], key=lambda dir: int(dir)):
        data = read_training_data(user_path + dir + "/training_data.txt")
        lens = []
        ts = []
        tsteps = []
        for tup in data:
            lens.append(len(tup[0]))
            ts.append(np.sum(tup[0]))
            if len(tup[0]) > 0:
                tsteps.append(np.mean(tup[0]))
        if len(lens) > 0:
            out_str = "{}: Num tras: {}\t Mean tra len: {}\t Max tra len: {}\t mean time span: {}min\t max time span: {}min\t mean time step size: {}s"
            print(out_str.format(dir, len(data), int(np.mean(lens)), np.max(lens), int(np.mean(ts)/60), int(np.max(ts)/60), int(np.mean(tsteps))))
        else:
            print("{}: skipped".format(dir))


def get_user_stats_labels():
    user_path = "../_shared_data/GPSLabels/trajectories/"
    labels = []
    for dir in tqdm(sorted([dir for dir in os.listdir(user_path)], key=lambda dir: int(dir))):
        data = read_training_data(user_path + dir + "/training_data.txt")
        for tup in data:
            labels.append(tup[2])

    distinct_labels = set(labels)
    for dl in distinct_labels:
        dlc = labels.count(dl)
        print("Label: {} \t Appearance: {}".format(dl, dlc))


###################################################################
# VISUALIZATION
###################################################################

def show_trajectory(label: str, times, distances):
    factor_to_meters = 0.01

    times = np.array(times)
    distances = np.array(distances) * factor_to_meters
    velos = distances / times

    times_added = np.cumsum(times)
    distances_added = np.cumsum(distances)

    # plt.plot(times_added, distances_added)
    # plt.title(label)
    # plt.xlabel("t [s]")
    # plt.ylabel("distance [m]")
    # plt.show()

    plt.plot(times_added, velos, "-")
    plt.title(label)
    plt.xlabel("t [s]")
    plt.ylabel("speed [m/s]")
    plt.show()


# TODO
def create_map_with_marker():
    # OPEN STREET MAP: Overpass API
    # https://developers.google.com/maps/documentation
    # https://developers.google.com/maps/documentation/javascript/adding-a-google-map
    # https://www.geeksforgeeks.org/python-plotting-google-map-using-gmplot-package/
    # https://www.tutorialspoint.com/plotting-google-map-using-gmplot-package-in-python
    pass


###################################################################
# HELPER FUNCTIONS
###################################################################


def gps_distance(p1: list, p2: list):
    """
    @param p[1/2]:  Coordinate Point (latitude, longitude) in floating angular notation
    @return:        The Distance between the coordinate points [meter]

    """
    r_earth = 6371000    # earth radius in meter
    p1_rad = [math.radians(x) for x in p1]
    p2_rad = [math.radians(x) for x in p2]
    d_haversine = haversine_distances([p1_rad, p2_rad])
    d_real = d_haversine * r_earth
    return d_real[0][1]


def read_training_data(path: str):
    with open(path, "r") as file:
        reader = csv.reader(file, delimiter=";")
        data_tuples = []
        # special reading behaviour due to fields that may be too long an need error handling
        while True:
            try:
                row = next(reader)
            except csv.Error:
                continue
            except StopIteration:
                break

            # windows handling:
            if not row:
                continue

            label = row[0]
            times = eval(row[1], {"__builtins__": None}, {})        # careful with eval (security)
            distances = eval(row[2], {"__builtins__": None}, {})    # careful with eval (security)
            data_tuples.append((times, distances, label))

    return data_tuples


###################################################################
# MAIN FUNCTIONS / ENTRY POINT
###################################################################


def main():
    # trajectory_path = "data/trajectories/010/Trajectory/20070804033032.plt"
    # _, _, _, _ = read_trajectory(trajectory_path)
    # label_path = "data/trajectories/010/labels.txt"
    # read_trajectory_labels(label_path)
    # get_user_stats_paths_and_times()
    # get_user_stats_labels()
    # show_trajectory("Walk", [2, 1, 1, 38, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, 1, 1, 1, 4, 2, 1, 1, 1, 4, 1, 1, 1, 204, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 21, 2, 7, 40, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 8, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 1, 2, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    #                 [469, 344, 233, 626, 596, 167, 95, 216, 180, 334, 228, 770, 146, 99, 180, 100, 93, 281, 293, 80, 211, 216, 215, 93, 61, 65, 45, 56, 33, 34, 48, 58, 34, 48, 88, 116, 140, 117, 116, 102, 140, 124, 131, 168, 280, 116, 108, 120, 125, 89, 87, 174, 1449, 209, 184, 183, 85, 89, 38, 28, 48, 56, 132, 97, 86, 87, 75, 76, 92, 89, 53, 80, 54, 76, 75, 44, 48, 2098, 86, 72, 20, 0, 43, 89, 88, 48, 42, 43, 34, 61, 116, 119, 116, 112, 140, 113, 93, 116, 113, 226, 202, 89, 119, 93, 106, 103, 95, 112, 111, 133, 89, 114, 70, 100, 111, 67, 114, 116, 113, 100, 113, 123, 100, 111, 56, 149, 61, 61, 224, 82, 91, 114, 113, 167, 169, 113, 146, 95, 112, 111, 93, 102, 72, 145, 123, 72, 80, 103, 173, 105, 104, 86, 110, 1220, 679, 1098, 2164, 741, 197, 252, 138, 156, 102, 246, 449, 201, 198, 109, 161, 123, 102, 126, 82, 54, 140, 125, 70, 26, 69, 72, 65, 88, 351, 56, 160, 117, 104, 108, 125, 84, 102, 104, 98, 76, 118, 93, 54, 140, 84, 92, 68, 92, 267, 0, 69, 100, 129, 122, 137, 120, 122, 82, 125, 156, 145, 133, 122, 134, 111, 111, 89, 69, 80, 93, 100, 122, 111, 102, 89, 364, 93, 82, 91, 78, 72, 100, 122, 106, 89, 168, 306, 167, 167, 168, 180, 112, 114, 102, 124, 100, 122, 133, 135, 124, 190, 78, 56, 56, 238, 65, 78, 103, 151, 169, 100, 111, 91, 111, 126, 111, 198, 124, 113, 78, 167, 167, 145, 167, 167, 102, 423, 136, 89, 111, 135, 122, 109, 113, 99, 136, 222, 226, 113, 125, 133, 89, 113, 89, 88, 502, 97, 121, 116, 125, 136, 129, 234, 136, 116, 132, 125, 102, 112, 116, 125, 129, 117, 76, 90, 64, 43, 76, 110, 44, 68, 69, 104, 92, 69, 88, 95, 88, 129, 116, 112, 102, 116, 117, 100, 82, 92, 97, 112, 133, 132, 100, 128, 114, 114, 129, 121, 112, 129, 112, 120, 129, 129, 114, 131, 116, 122, 112, 133, 116, 128, 112, 125, 128, 116, 105, 112, 114, 122, 116, 108, 125, 105, 116, 120, 121, 125, 120, 117, 116, 132, 116, 114, 117, 125, 122, 125, 104, 120, 114, 122, 133, 116, 120, 140, 103, 129, 140, 136, 112, 128, 130, 125, 132, 140, 120, 123, 120, 116, 105, 112, 120, 104, 125, 97, 108, 108, 120, 108, 102, 143, 102, 129, 122, 136, 215, 110, 135, 100, 129, 105, 96, 102, 128, 140, 44, 122, 102, 95, 92, 97, 76, 92, 86, 72, 84, 88, 88, 97, 102, 88, 131, 82, 104, 96, 117, 116, 104, 84, 240, 156, 110, 92, 152, 137, 273, 70, 0, 62, 285, 97, 61, 70, 84, 72, 69, 72, 89, 151, 164, 103, 69, 61, 56, 64, 60, 94, 132, 132, 148, 86, 80, 89, 137, 120, 100, 87, 116, 129, 77, 300, 76, 82, 89, 108, 112, 105, 211, 116, 112, 122, 94, 89, 105, 105, 95, 105, 89, 108, 92, 82, 69, 86, 121, 97, 129, 117, 92, 116, 110, 108, 105, 109, 104, 108, 108, 110, 97, 95, 86, 88, 102, 92, 92, 117, 120, 102, 76, 48, 51, 88, 92, 69, 89, 92, 102, 72, 64])
    # show_trajectory("Train", [59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 57, 2, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 61, 59, 59, 59, 60, 57, 2, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 57, 2, 59, 59, 60, 59, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 57, 2, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 57, 2, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 57, 2, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 57, 2, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 60, 59, 59, 61, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 59],
    #                 [83980, 123525, 126011, 86203, 100548, 80524, 87481, 117604, 134969, 147617, 160130, 127449, 58037, 37494, 0, 0, 14166, 70119, 124205, 159965, 168274, 168352, 170753, 169776, 171191, 171817, 169778, 168932, 171571, 172158, 161985, 165193, 167213, 168209, 166923, 158229, 174673, 171016, 171485, 170898, 167752, 164684, 118153, 59418, 67876, 110502, 134571, 148156, 98212, 51177, 40984, 2695, 0, 0, 0, 0, 0, 0, 0, 71, 0, 52, 535, 1259, 493, 602, 1776, 642, 643, 990, 19755, 42958, 70808, 119667, 155596, 160674, 168185, 171382, 173930, 169014, 173009, 165485, 173613, 168473, 168888, 162658, 159677, 166232, 171096, 170688, 173629, 171345, 173385, 165314, 169391, 172677, 176948, 169855, 165482, 166910, 149336, 69037, 49759, 12352, 0, 0, 2194, 24076, 47035, 84560, 118179, 144750, 156482, 167724, 169566, 171682, 173683, 169976, 167699, 168865, 167351, 170270, 175221, 173025, 172031, 172349, 173115, 176096, 171663, 170255, 178021, 173335, 172671, 170689, 175930, 176776, 173587, 163488, 123948, 63102, 40359, 181, 1060, 38775, 87854, 122152, 137557, 140809, 146854, 143324, 143800, 160426, 164964, 153250, 156702, 166437, 172132, 173743, 176895, 173178, 173008, 171603, 171339, 175704, 173171, 171029, 170931, 175355, 169741, 169896, 172827, 173678, 169689, 168462, 148959, 85428, 51366, 22852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7815, 32970, 50961, 81713, 116486, 143428, 154008, 166235, 174912, 174712, 172548, 172465, 173414, 174275, 175674, 177808, 173742, 173294, 171831, 172135, 174460, 172759, 173551, 174204, 179966, 173315, 172898, 170320, 177708, 176261, 174351, 158676, 92058, 38502, 37288, 1976, 0, 0, 0, 0, 0, 0, 0, 9844, 30766, 59734, 101919, 127658, 155611, 172825, 174149, 176624, 180562, 175862, 176895, 177838, 176334, 172891, 178778, 173916, 168595, 181195, 178275, 177095, 175619, 176403, 169568, 172771, 178989, 179435, 177095, 174402, 176470, 175835, 172391, 147278, 75077, 46560, 12728, 0, 0, 8030, 59109, 94264, 115290, 139894, 158319, 173717, 177118, 179585, 177015, 177890, 175737, 176075, 175012, 175242, 178076, 173079, 170626, 179306, 176775, 168421, 134878, 73361, 62071, 83766, 115428, 147054, 167497, 175156, 169675, 175332, 175363, 172782, 176668, 167703, 116682, 45810, 38275, 4202, 1538, 36060, 83906, 114877, 136303, 156656, 168496, 172956, 170159, 162190, 165611, 132493, 127142, 147456, 160388, 159631, 173534, 173900, 166896, 177620, 177143, 170361, 164500, 172606, 176104, 168973, 179308, 177946, 177746, 176606, 176105, 164830, 105975, 44765, 44887, 2673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2830, 21845, 44455, 91661, 128564, 147871, 133542, 75539, 98065, 127518, 142403, 146141, 167927, 172349, 169685, 166705, 171046, 179579, 171408, 168061, 150696, 64897, 42335, 63332, 49038, 72606, 112125, 133010, 129817, 68797, 45224, 46209])
    show_trajectory("Car", [1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 119, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 63, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],
                    [514, 523, 485, 471, 393, 1907, 326, 275, 342, 367, 305, 406, 210, 790, 701, 901, 956, 1090, 1226, 836, 857, 1001, 1313, 589, 558, 473, 537, 642, 467, 509, 438, 911, 394, 140, 17, 316, 503, 527, 601, 350, 657, 358, 396, 401, 362, 417, 367, 347, 334, 678, 748, 275, 1521, 6652, 804, 579, 323, 622, 516, 512, 613, 1150, 814, 367, 356, 189, 179, 994, 501, 2559, 884, 461, 572, 694, 823, 999, 960, 893, 823, 1333, 1374, 1774, 189, 400, 292, 10686, 88, 48, 99, 22, 33, 33, 44, 48, 34, 43, 176, 246, 240, 224, 275, 358, 358, 404, 371, 748, 395, 429, 461, 415, 497, 347, 478, 637, 1728, 1104, 1249, 1337, 1425, 1473, 1402, 1560, 1592, 3383, 1685, 1751, 1749, 1748, 1726, 1672, 1647, 1624, 3271, 1648, 1670, 1670, 1614, 1603, 1568, 1413, 1248, 1515, 281, 135, 64, 34, 41, 0, 0, 22, 0, 17, 0, 0, 0, 22, 22, 0, 22, 20, 0, 0, 22, 0, 0, 11, 0, 0, 28, 0, 58, 245, 343, 545, 546, 625, 712, 1557, 903, 1001, 872, 948, 756, 525, 389, 279, 78, 69, 69, 22, 0, 22, 22, 0, 26, 311, 192, 72, 117, 58, 91, 62, 36, 41, 0, 138, 234, 334, 411, 412, 256, 246, 288, 980, 478, 534, 467, 412, 2747, 857, 870, 835, 735, 670, 844, 244, 140, 123, 142, 163, 330, 451, 634, 1705, 1006, 1093, 1217, 1327, 1409, 1477, 1495, 1528, 3170, 1658, 1674, 1722, 1687, 1791, 1748, 1793, 1828, 3655, 1797, 1777, 1768, 1799, 1736, 1746, 1723, 1679, 3461, 1722, 1764, 1773, 1730, 1746, 1728, 1700, 1781, 3543, 1776, 1750, 1679, 1674, 1671, 1569, 1534, 1444, 2712, 1151, 1022, 896, 875, 787, 791, 852, 986, 2200, 1268, 1348, 1423, 1440, 1560, 1542, 1568, 1596, 3184, 1602, 1577, 1597, 1559, 1510, 1478, 1361, 1332, 2505, 1262, 1176, 1177, 1236, 1245, 1229, 1162, 1078, 1845, 778, 862, 959, 997, 1057, 989, 878, 793, 1355, 767, 792, 899, 1091, 991, 947, 929, 947, 1579, 641, 475, 467, 325, 240, 171, 68, 51, 56, 61, 0, 0, 0, 26, 176, 256, 281, 605, 342, 290, 332, 367, 299, 361, 359, 430, 861, 469, 554, 585, 657, 741, 747, 682, 750, 1646, 742, 699, 613, 602, 593, 739, 855, 966, 2433, 1406, 1548, 1624, 1714, 1780, 1836, 1860, 1872, 3843, 1949, 1950, 1949, 1950, 2008, 2003, 2004, 1972, 4022, 2006, 1972, 1951, 1971, 1927, 1947, 1927, 1915, 3744, 1915, 1891, 1970, 1898, 1890, 1947, 1948, 1925, 3749, 1835, 1857, 1846, 1869, 1946, 1861, 1935, 1835, 3728, 1874, 1736, 1737, 1659, 1734, 1799, 1810, 1989, 3873, 1908, 1885, 1890, 1903, 1912, 1901, 1924, 1990, 4007, 2059, 2080, 2071, 2103, 2069, 2060, 2081, 2082, 4072, 2047, 2038, 2026, 2016, 1953, 1914, 1915, 1826, 3629, 1770, 1768, 1705, 1672, 1644, 1585, 1698, 1695, 3443, 1727, 1669, 1780, 1815, 1768, 1813, 1782, 1803, 3571, 1802, 1738, 1805, 1781, 1774, 1758, 1791, 1717, 3500, 1707, 1759, 1757, 1715, 1728, 1796, 1758, 1757, 3584, 1848, 1835, 1859, 1859, 1791, 1803, 1781, 1746, 3481, 1749, 1725, 1615, 1536, 1536, 1524, 1469, 1402, 2582, 1259, 1304, 1335, 1325, 1314, 1279, 1391, 1394, 2875, 1356, 1313, 1390, 1356, 1353, 1383, 1384, 1414, 2801, 1360, 1315, 1302, 1292, 1261, 1285, 1278, 1319, 2672, 1359, 1403, 1392, 1413, 1412, 1368, 1391, 1357, 2791, 1435, 1446, 1370, 1357, 1368, 1391, 1369, 1212, 2392, 1157, 1212, 1201, 1139, 1034, 948, 804, 745, 1404, 695, 624, 624, 547, 667, 742, 670, 645, 1336, 578, 456, 412, 392, 369, 336, 279, 334, 580, 356, 252, 230, 207, 281, 180, 140, 147, 400, 190, 98, 140, 169, 185, 189, 145, 156, 292, 138, 233, 190, 169, 179, 189, 205, 245, 501, 246, 235, 246, 234, 243, 201, 214, 172, 395, 222, 279, 167, 226, 102, 145, 184, 71, 216, 89, 100, 44, 44, 11, 28, 22, 33, 135, 283, 336, 339, 393, 462, 527, 612, 617, 1340, 703, 684, 725, 775, 837, 851, 907, 940, 2010, 1012, 1053, 1034, 1027, 1050, 1007, 957, 928, 1698, 811, 819, 782, 667, 572, 497, 489, 388, 658, 263, 177, 172, 93, 103, 109, 95, 80, 102, 80, 78, 56, 33, 44, 34, 33, 44, 89, 80, 239, 288, 339, 335, 361, 418, 428, 1290, 608, 679, 699, 723, 659, 730, 646, 604, 874, 258, 103, 179, 140, 151, 109, 70, 151, 370, 107, 178, 194, 158, 191, 281, 328, 284, 612, 223, 278, 377, 412, 467, 534, 590, 502, 842, 422, 445, 416, 368, 256, 281, 168, 238, 265, 112, 85, 111, 126, 33, 22, 22, 0, 69, 78, 67, 100, 134, 223, 224, 159, 109, 434, 156, 223, 146, 167, 200, 180, 286, 352, 890, 537, 480, 447, 380, 312, 194, 112, 79, 234, 168, 146, 201, 245, 300, 292, 256, 194, 346, 136, 95, 91, 122, 123, 156, 256, 280, 456, 207, 359, 236, 191, 201, 245, 313, 334, 556, 203, 158, 205, 119, 169, 183, 213, 201, 435, 181, 156, 89, 76, 220, 128, 24, 0, 78, 44, 22, 22, 0, 0, 0, 11, 11, 14, 0, 0, 102, 256, 384, 383, 272, 286, 562, 279, 303, 224, 89, 93, 28, 51, 14, 133, 147, 149, 192, 212, 256, 314, 501, 609, 1235, 635, 667, 723, 845, 802, 801, 856, 790, 1546, 668, 656, 646, 745, 819, 757, 667, 712, 1468, 756, 790, 767, 812, 856, 868, 891, 935, 1680, 669, 558, 579, 480, 480, 497, 598, 726, 1648, 774, 792, 754, 664, 640, 619, 554, 501, 858, 434, 432, 426, 398, 405, 395, 452, 466, 1020, 484, 502, 542, 577, 596, 592, 549, 533, 895, 415, 394, 423, 468, 557, 645, 734, 756, 1757, 912, 834, 778, 690, 680, 767, 779, 737, 1359, 523, 403, 356, 290, 223, 169, 158, 119, 306, 146, 125, 191, 194, 281, 247, 224, 237, 370, 145, 225, 383, 330, 392, 791, 714, 771, 1618, 624, 452, 351, 258, 269, 379, 390, 392, 982, 412, 392, 369, 323, 312, 279, 356, 367, 812, 423, 500, 601, 613, 612, 567, 489, 389, 479, 145, 198, 135, 174, 245, 390, 446, 502, 1169, 561, 701, 590, 613, 357, 256, 225, 283, 288, 89, 89, 91, 65, 89, 56, 9, 20, 20, 0, 11, 44, 67, 100, 58, 69, 78, 334, 112, 136, 67, 91, 80, 91, 222, 344, 960, 556, 567, 569, 646, 679, 680, 701, 934, 1558, 757, 767, 778, 813, 867, 835, 778, 801, 1480, 724, 747, 701, 767, 773, 734, 701, 757, 1526, 787, 801, 834, 890, 867, 847, 903, 835, 1392, 890, 4183, 2385, 1681, 1530, 990, 405, 1899, 689, 822, 781, 945, 755, 735, 679, 651, 1304, 523, 356, 257, 192, 257, 256, 347, 399, 946, 534, 556, 612, 545, 425, 469, 423, 377, 973, 557, 534, 534, 580, 600, 660, 657, 667, 1335, 567, 624, 645, 636, 646, 702, 712, 701, 1282, 645, 603, 570, 448, 313, 211, 85, 0, 89, 56, 89, 200, 245, 245, 225, 279, 256, 523, 223, 294, 180, 123, 91, 86, 64, 51, 33, 22, 28, 37, 37, 82, 22, 0, 0, 22, 0, 0, 0, 117, 133, 226, 257, 291, 545, 257, 203, 211, 200, 177, 115, 82, 82, 289, 245, 315, 335, 292, 265, 89, 177, 223, 578, 446, 475, 316, 369, 508, 423, 488, 458, 1023, 425, 502, 468, 508, 526, 593, 592, 612, 1302, 668, 689, 701, 669, 576, 601, 634, 590, 1042, 434, 390, 301, 252, 235, 442, 442, 480, 992, 601, 648, 724, 812, 990, 1090, 1093, 1064, 1991, 979, 979, 950, 912, 947, 925, 947, 970, 1801, 724, 680, 745, 803, 812, 890, 867, 890, 1857, 868, 883, 761, 617, 480, 303, 312, 245, 446, 209, 212, 261, 280, 337, 311, 256, 278, 634, 447, 525, 534, 548, 513, 580, 649, 723, 1413, 646, 646, 657, 634, 601, 634, 590, 578, 923, 400, 401, 367, 357, 394, 411, 423, 523, 968, 590, 678, 745, 667, 547, 547, 635, 701, 1579, 802, 703, 690, 645, 589, 578, 601, 568, 1224, 612, 768, 623, 523, 400, 280, 402, 313, 578, 367, 423, 612, 456, 434, 501, 467, 523, 1079, 571, 635, 613, 578, 534, 534, 500, 500, 782, 356, 200, 100, 20, 37, 28, 11, 44, 270, 225, 224, 222, 168, 201, 224, 267, 222, 167, 0, 14, 22, 78, 11, 22, 0, 22, 22, 102, 102, 125, 125, 169, 212, 200, 132, 534, 340, 336, 311, 233, 245, 197, 145, 44, 199, 14, 0, 11, 147, 278, 380, 423, 445, 987, 526, 471, 569, 634, 578, 562, 534, 691, 1390, 649, 712, 645, 590, 803, 2915, 1312, 889, 1951, 946, 1024, 754, 706, 681, 691, 458, 414, 651, 135, 112, 112, 225, 293, 270, 312, 283, 677, 448, 478, 589, 494, 453, 526, 501, 547, 1293, 812, 794, 768, 836, 946, 890, 815, 1025, 1515, 758, 802, 702, 636, 568, 500, 438, 423, 713, 367, 334, 300, 201, 114, 91, 96, 33, 48, 0, 22, 0, 22, 11, 78, 191, 234, 691, 312, 516, 476, 451, 402, 474, 549, 624, 1459, 757, 757, 712, 790, 825, 1005, 948, 903, 1704, 860, 870, 969, 968, 1023, 1046, 1068, 937, 1825, 812, 779, 746, 801, 757, 779, 812, 824, 1623, 857, 834, 845, 834, 836, 878, 979, 1001, 1860, 834, 812, 779, 767, 701, 701, 801, 779, 1704, 1031, 871, 894, 867, 824, 802, 721, 805, 1318, 476, 290, 136, 24, 17, 33, 56, 91, 424, 300, 389, 445, 479, 523, 534, 556, 558, 1247, 673, 624, 623, 679, 695, 671, 558, 535, 1362, 701, 725, 635, 614, 535, 469, 392, 350, 768, 525, 480, 460, 471, 412, 447, 431, 425, 802, 390, 398, 336, 383, 400, 335, 312, 301, 780, 478, 528, 549, 401, 467, 512, 567, 680, 1304, 612, 556, 591, 590, 547, 558, 456, 456, 847, 446, 423, 456, 478, 402, 468, 501, 489, 924, 412, 347, 367, 401, 345, 357, 479, 523, 1069, 512, 478, 467, 501, 456, 423, 412, 411, 812, 445, 389, 391, 434, 425, 447, 423, 445, 1091, 613, 600, 478, 413, 367, 334, 369, 359, 734, 431, 500, 448, 337, 235, 278, 245, 336, 691, 201, 284, 389, 447, 511, 601, 556, 523, 1123, 634, 623, 691, 723, 723, 801, 845, 957, 1937, 957, 879, 823, 701, 634, 613, 589, 612, 1112, 523, 446, 480, 479, 492, 479, 423, 323, 414, 151, 99, 119, 213, 281, 311, 412, 434, 1045, 623, 490, 513, 523, 523, 500, 523, 558, 845, 356, 347, 325, 312, 334, 336, 245, 245, 556, 368, 423, 579, 479, 537, 438, 558, 584, 1151, 567, 489, 467, 456, 467, 534, 579, 634, 1335, 679, 657, 645, 669, 667, 623, 602, 590, 1146, 545, 558, 457, 546, 594, 667, 689, 780, 1651, 979, 1001, 991, 967, 923, 1034, 1168, 1112, 2502, 1301, 1312, 1259, 1171, 1172, 1217, 1288, 1367, 2985, 1538, 1578, 1649, 1536, 1486, 1348, 1161, 1056, 1858, 919, 876, 836, 794, 713, 650, 562, 550, 1266, 700, 694, 670, 614, 754, 765, 754, 717, 1490, 719, 743, 787, 810, 872, 922, 981, 1024, 2008, 1035, 1115, 1155, 1083, 950, 914, 922, 1016, 2189, 1187, 1185, 1216, 1197, 1231, 1232, 1200, 1215, 2666, 1384, 1408, 1469, 1497, 1517, 1494, 1499, 1508, 3023, 1522, 1520, 1542, 1569, 1610, 1630, 1583, 1568, 3169, 1602, 1590, 1612, 1590, 1601, 1568, 1602, 1568, 3158, 1557, 1512, 1468, 1412, 1347, 1324, 1279, 1234, 2402, 1101, 1101, 1034, 1023, 979, 990, 1101, 1156, 2514, 1381, 1447, 1450, 1568, 1657, 1691, 1757, 1791, 3837, 1990, 1979, 2002, 2025, 1947, 1947, 1902, 1906, 3614, 1735, 1746, 1724, 1757, 1768, 1657, 1602, 1557, 2869, 1357, 1301, 1257, 1246, 1268, 1324, 1302, 1369, 2814, 1446, 1490, 1435, 1458, 1457, 1468, 1480, 1446, 2780, 1368, 1323, 1312, 1279, 1301, 1290, 1245, 1257, 2491, 1257, 1224, 1212, 1235, 1279, 1212, 1123, 1157, 1935, 946, 912, 1001, 1079, 1092, 1135, 1202, 1248, 2625, 1447, 1459, 1505, 1506, 1635, 1635, 1670, 1697, 3305, 1671, 1715, 1769, 1824, 1838, 1792, 1826, 1838, 3675, 1837, 1814, 1782, 1803, 1759, 1770, 1769, 1802, 3829, 1982, 1915, 1948, 1959, 1947, 1935, 1935, 1935, 3796, 1861, 1866, 1902, 1880, 1902, 1869, 1844, 1812, 3666, 1820, 1828, 1796, 1754, 1734, 1620, 1619, 1578, 3101, 1548, 1571, 1561, 1505, 1472, 1447, 1469, 1428, 2841, 1301, 1268, 1194, 1126, 1143, 1166, 1253, 1273, 2754, 1450, 1447, 1453, 1427, 1458, 1469, 1557, 1567, 3216, 1586, 1627, 1589, 1614, 1632, 1650, 1656, 1675, 3458, 1827, 1878, 1903, 1929, 1955, 1964, 1981, 1972, 3970, 1981, 1981, 1989, 1963, 1972, 1972, 1930, 1921, 3987, 1972, 1980, 1963, 1938, 1905, 1879, 1873, 1882, 3808, 1894, 1972, 1926, 1882, 1905, 1856, 1878, 1859, 3768, 1932, 1978, 2039, 2066, 2087, 2102, 2123, 2110, 4176, 2047, 2107, 2142, 2182, 2177, 2171, 2173, 2137, 4264, 2102, 2058, 2044, 1980, 1945, 1951, 1890, 1826, 3533, 1751, 1768, 1761, 1740, 1716, 1675, 1645, 1593, 3070, 1451, 1393, 1276, 1208, 1180, 1112, 1036, 881, 1475, 689, 668, 601, 641, 627, 667, 658, 597, 1029, 487, 572, 674, 760, 814, 942, 1050, 1111, 2193, 1041, 985, 906, 852, 753, 679, 596, 455, 719, 273, 282, 273, 273, 289, 246, 193, 201, 610, 378, 373, 409, 535, 657, 724, 704, 758, 1494, 725, 689, 702, 669, 624, 601, 512, 468, 757, 325, 398, 447, 457, 490, 568, 569, 478, 818, 245, 223, 145, 154, 112, 111, 89, 289, 664, 513, 556, 612, 634, 556, 591, 712, 734, 1538, 667, 623, 567, 578, 613, 667, 781, 868, 2033, 1177, 1209, 1201, 1200, 1039, 1097, 974, 2509, 490, 536, 502, 524, 592, 695, 772, 857, 1989, 1073, 1071, 1006, 996, 741, 583, 336, 192, 146, 26, 61, 11, 24, 0, 0, 22, 33, 548, 377, 508, 551, 594, 605, 602, 616, 670, 1712, 888, 935, 976, 1058, 1130, 1134, 1080, 1106, 2027, 964, 931, 901, 871, 960, 973, 976, 1001, 2004, 1053, 1060, 1002, 1023, 1007, 954, 971, 910, 1833, 893, 888, 885, 871, 894, 927, 936, 918, 1775, 950, 926, 960, 949, 949, 958, 973, 998, 2143, 1129, 1127, 1077, 1006, 962, 917, 859, 821, 1593, 781, 831, 887, 941, 975, 1004, 1010, 1061, 2185, 1029, 1008, 1018, 1003, 1058, 1001, 1016, 1031, 1782, 929, 982, 1039, 1037, 1027, 1017, 1046, 930, 1825, 701, 576, 421, 454, 551, 483, 431, 377, 1914, 700, 829, 925, 874, 813, 820, 674, 664, 1117, 462, 353, 308, 265, 405, 291])


def main_data_import():
    """
    after downloading the data, copy every directory that contains labels into the workspace
    """
    tmp_data_path = "/home/julius/Downloads/Geolife Trajectories 1.3/Data/"
    workspace_data_path = "../_shared_data/GPSLabels/trajectories/"         # has to be created manually
    # tmp_data_path = "C:/Users/Julius/Downloads/Geolife Trajectories 1.3/Geolife Trajectories 1.3/Data/"
    # workspace_data_path = "C:/Users/Julius/PycharmProjects/_shared_data/"
    copy_useful_data_to_workspace(tmp_data_path, workspace_data_path)


def main_label_data():
    """
    for each user dir create a (huge) file containing all datapoints with their label, each datapoint beeing one row
    (e.g.: timestamp, latitude, longitude, altitude, label)
    """
    dirs = ["../_shared_data/GPSLabels/trajectories/" + directory for directory in
            os.listdir("../_shared_data/GPSLabels/trajectories")]
    # dirs = ["C:/Users/Julius/PycharmProjects/_shared_data/GPSLabels/trajectories/" + directory for directory in
    #         os.listdir("C:/Users/Julius/PycharmProjects/_shared_data/GPSLabels/trajectories")]
    for directory in tqdm(dirs):
        label_trajectories(directory)


def main_create_training_data():
    # data_path = "../_shared_data/GPSLabels/trajectories/"
    data_path = "C:/Users/Julius/PycharmProjects/_shared_data/GPSLabels/trajectories/"
    for dir in os.listdir(data_path):
        create_training_data_distance_time(data_path + dir)


def main_interpolate_data():
    data_path = "../_shared_data/GPSLabels/trajectories/"
    interpolate_training_data(data_path + "010", frequency=0.2)


if __name__ == '__main__':
    # main_data_import()
    # main_label_data()
    # main_create_training_data()
    # main_interpolate_data()
    main()

